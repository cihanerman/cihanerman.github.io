[{"content":"Başlamadan Önce Herkese merhaba. Django\u0026rsquo;da sorgularımızı optimize etme serisini ikinci yazısındayız. Serinin bir önceki yazısı ile benzer bir yazı olacak. Mantık olarak yine ihtiyacımız kadarını alacağız, farklı olarak bu sefer dönen sonuçlar obje listesi olarak değil dictionary listesi olacak. Hazırsak başlayalım. Kaynak olarak django\u0026rsquo;nun kendi dökümanın kulanacağım.\nSen sen ve sen Django\u0026rsquo;da sorgularımızı values metodu ile bitiri ve values metoduna istediğimiz alanları verirsek ilgili objelerin sadece istediğimiz özelliklerinin olduğu bir dictionary listesi dönecek. Onlarca özellikli bir sınıfın objelerini çekiyorsak bu bize gözle görülür bir hız kazandıracaktır.\n1 2 Blog.objects.values(\u0026#39;id\u0026#39;, \u0026#39;name\u0026#39;) #=\u0026gt; \u0026lt;QuerySet [{\u0026#39;lower_name\u0026#39;: \u0026#39;beatles blog\u0026#39;}]\u0026gt; Burada Blob sınıfına ayit tüm objelerin sadece id ve name özelliklerinin bulunduğu dictionarylarin bir listesi dönecektir. Bize lazım olmayacak bilgilerin taşıma masrafından kurtuluyoruz.\nHımm Kulağıma hımm sesleri geliyor. Öyleyse values_list\u0026rsquo;e geçelim. Kullanımı values ile aynı sadece verdiği çıktı şekili farklı. Her bir obje için istediğimiz özelliklerinin olduğu bir tuple listesi dönüyor.\n1 2 Blob.objects.values_list(\u0026#39;id\u0026#39;, \u0026#39;name\u0026#39;).order_by(\u0026#39;id\u0026#39;) #=\u0026gt; \u0026lt;QuerySet[(1,\u0026#39;yazı1\u0026#39;), (2, yazı2\u0026#39;), (3, yazı3\u0026#39;), ...]\u0026gt; Burada Blob sınıfına ayit bütn objelerin id ve name özelliklerinin tuple olarak bir listesini alıyoruz.\n1 2 Blob.objects.values_list(\u0026#39;id\u0026#39;, flat=True).order_by(\u0026#39;id\u0026#39;) #=\u0026gt; \u0026lt;QuerySet [1, 2, 3, ...]\u0026gt; Burada ise bütün Blob objelerinin id\u0026rsquo;lerinin bir listesi alıyoruz.\nSon söz Bu iki methot ile sadece ihtiyacımız olan özellikleri ister bir dictionary listesi, istersekde bu özelliklerin bulunduğu bir tuple listesi ya da bir özelliğin değerlerinde oluşan bir liste alabiliyoruz. Bu bize hem hız kazandırıyor hem de veriyi bu şekilerden birine dönüştürmemiz gerekirse ya da işimizi halledebiliyorsak, ağır işi sonderece optimize, hızlı çalışan veri tabanına yaptırmış oluruz. Django\u0026rsquo;da sorgu optimizasyonuyla ilgili bir yazı daha yazmayı planlmaktayım. Umarım faydalı bir yazı olmuştur. Sorularınız, yorumlarınızı, katkılarınızı, yapıcı eleştirilerinizi benimle paylaşırsanız sevinirim. Teşekkü ederim, iyi çalımalar.\nBonus Django\u0026rsquo;da queryseti\u0026rsquo;i values ile çekip pandas\u0026rsquo;ın DataFrame sınıfının from_records metodu ile dataframe yapısına dönüştürebilirsiniz. Üzerinde kolayca veri manupülasyonu yapabilir ve to_excel metoduyla kolayca excel çıktısı alabilirsiniz.\n\u0026ldquo;İstediğini değil, gerekeni al; gerekmeyen şey, çok ucuz da olsa senin için pahalıdır.\u0026rdquo; Cato\n","permalink":"https://cihanerman.github.io/posts/values-valueslist/","summary":"Başlamadan Önce Herkese merhaba. Django\u0026rsquo;da sorgularımızı optimize etme serisini ikinci yazısındayız. Serinin bir önceki yazısı ile benzer bir yazı olacak. Mantık olarak yine ihtiyacımız kadarını alacağız, farklı olarak bu sefer dönen sonuçlar obje listesi olarak değil dictionary listesi olacak. Hazırsak başlayalım. Kaynak olarak django\u0026rsquo;nun kendi dökümanın kulanacağım.\nSen sen ve sen Django\u0026rsquo;da sorgularımızı values metodu ile bitiri ve values metoduna istediğimiz alanları verirsek ilgili objelerin sadece istediğimiz özelliklerinin olduğu bir dictionary listesi dönecek.","title":"Django'da sorgu optimizastonu #2"},{"content":"Başlamadan Önce Herkese merhaba. Django\u0026rsquo;da performanas sorunları yaşıyor olabiliriz bu gibi durumlarda yapabileceğimiz bir kaç şey var. Bunlardan biri daha önceki bir yazımda açıklamıştım, genarator kullanımıydı. Yapabileceğimiz bir başka şeyde ağır işleri veri tabanına yaptırmak (ki bu yazıda bundan bahsetmeyeceğiz). Yapabileceğimiz bir şey daha var o da, veri tabanından ihtiyacımız kadarını istemek. Bu şekilde kaynakalrımızı daha az tüketip daha fazla hızlanacağız. O zaman başlayalım. Kaynak olarak django\u0026rsquo;nun kendi dökümanın kulanacağım.\nSen Gelme Ulan Ayı Django orm ile veri tabanına bir sorgu yazdığımızda objenin bütün özellikleri gelir. Bu özellikleri sayısı fazlaysa ve/ve ya sorgu sonucunda çok fazla obje geliyorsa bu durum bize performas konusunda olumsuz olarak yansır. Böyle bir durumda kendimizi(Yazdığımız kodu) sorgulamamız gerekir. Orada bir sınıfı ağit objelerin bütün özelliklerine ihtiyacımız var mı? \u0026ldquo;Yo\u0026rdquo; diyorsanız karşınıda only fonksiyonu(tatata tam :). Sorgumuzu only ile bitirim sadece ihtiyacımız olan özellikleri yazarsak(Sadece bir, iki özelliğe ihtiyacımız olabilir ve modelimizde onlarca özellik bulunabilir) çok daha küçük bir veri, veri tabanından hızlıca gelip django orm tarafından hızlıca size sunulabilir. Ben süre olarak bunu ölçmedim, bunula birlikte kendim bu konuda araştırma yaparken rastladım ve demelerimde gözle görülür sonuçlar aldım. Bir örnek gösterelim:\n1 Entry.objects.only(\u0026#34;headline\u0026#34;, \u0026#34;body\u0026#34;) Burada Entry sınıfının tüm objelerinin sadece headline ve body özellikleri geliyor. Entry sınıfında 20-30 özellik olduğunu düşünsenize. only, hiç ihtiyamız olmayan bilgiler için performans kaybetmemizi önlüyor. Orm\u0026rsquo;e ve dolayısıyla veri tabanına bize sadece bu özellikler lazım sadece bunları getir demiş oluyoruz.\nİyi hoş da İyi hoş da ya bize 20 özellikten 15\u0026rsquo;i lazımsa 15 tanesini tek tek yazacak mıyız ? Aslında bir yazılımcı olarak performans sorunu yaşıyorsan yazacaksınız. Sizin işiniz bu. Belki zamanında yazılmış performanssız kodun sorumlusu siz olmaya bilirsiniz ama şu an böyle bir sorun var ve bu sorun artık sizin sorununuz. Ben bunu sürekli yaşıyorum. Bir şirkette çalışıyor yada bir girişimciyseniz ve yazılım kısmı sizdeyse, insanlar sorunu çözmenizi bekliyor. Sizin durumunuzu anlasalar ya da anlamasalarda ilgilendikleri konu sorunu çözmeniz, yaşadığınız zorluklar değil. Neyseki python ve django \u0026ldquo;kolaylaştırınız, zorlaştırmayınız\u0026rdquo; felsefesine sahip. Burada imdadımıza defer yetişiyor. Defer\u0026rsquo;ı only\u0026rsquo;in tersi olarak düşüne bilirsiniz. Yani istemediğiniz özellikleri yazıyorsunuz ve onların dışında kalan özellikler geliyor.\n1 Entry.objects.defer(\u0026#34;headline\u0026#34;, \u0026#34;body\u0026#34;) Burada Entry sınıfına ayit tüm objelerin headline ve body dışındaki özellikleri çekiyoruz.\nSon söz Django orm\u0026rsquo;de bu iki methodu kullanarak sorgularımızı hızlandıra biliriz. Django\u0026rsquo;da sorgular performansı etkileyen kritik konuların başında gelir ve performans konusunda iyiliştirme yapmaya sorgularınızdan başlamanızı tavsiye ederim. Bu konuda bir yazı daha yazmayı planlıyorum. Umarım faydalı bir yazı olmuştur. Sorularınız, yorumlarınızı, katkılarınızı, yapıcı eleştirilerinizi benimle paylaşırsanız sevinirim. Teşekkü ederim, iyi çalımalar.\nİhtiyaçtan fazlası israftır.\n","permalink":"https://cihanerman.github.io/posts/defer-only/","summary":"Başlamadan Önce Herkese merhaba. Django\u0026rsquo;da performanas sorunları yaşıyor olabiliriz bu gibi durumlarda yapabileceğimiz bir kaç şey var. Bunlardan biri daha önceki bir yazımda açıklamıştım, genarator kullanımıydı. Yapabileceğimiz bir başka şeyde ağır işleri veri tabanına yaptırmak (ki bu yazıda bundan bahsetmeyeceğiz). Yapabileceğimiz bir şey daha var o da, veri tabanından ihtiyacımız kadarını istemek. Bu şekilde kaynakalrımızı daha az tüketip daha fazla hızlanacağız. O zaman başlayalım. Kaynak olarak django\u0026rsquo;nun kendi dökümanın kulanacağım.","title":"Django'da sorgu optimizastonu #1"},{"content":"Başlamadan Önce Herkese merhaba. Bu yazımda python\u0026rsquo;da fonksiyonel programalamnın gücünden faydalanmamızı sağlayan üç fonksiyondan bahsedeceğim. Bu yazı fonksiyonel programlama paradigmasını anlatan bir yazı değil. Bu paradigmanın avantajları; yazması, okuması, konturolü kolay ve tekrar kullanılabilirliği yüksek kod yazılmasını sağlıyor. İnternetten programlama paradigmalarını araştırabilirsiniz. Python yüksek seviyeli bir dil olduğu için birden fazla programlama paradigmanı destekliyor. Python gerçekten çok iyi bir araç. Burada birazdan anlatacağım üç fonksiyonla ilgili daha fazla bilgi edinebilirsiniz.\nProgramlamada döngüler kullanırız( hadi ya! ). Ama döngü gibi, if gibi yapılar programı yavaşlatır. Mecbursak elbette bu yapıları kullanacağız. Ama ya o kadar mecbur değilsek. Hadi Harzırsak başlayalım.\nHein Map ! map fonksiyonu pythondaki yüksek seviyeli fonksiyonlardan biri, paremetre olarak başka fonksiyonları alabiliyor. Python\u0026rsquo;da yerleşik geliyor ve iyi optimize edilmiş bir fonksiyon olduğu için çok hızlı çalışıyor. Bir liste yada itere edilebilen bir veri yapısına sahip olduğumuzu düşünelim.( Bir dünya hayal edin herkes mutlu, herkes şen ) Elimizdeki bu yapının her bir elamanına bir işlem uygulamak istiyoruz. Bu durumda ne yaparız? Cevap; Döngü dönmeyiz. Biliyorum programlamaya başlarken insanlara böyle öğretiyorlar, bana da böyle öğretmişlerdi. Böyle öğretmek muhtemelen daha mantıklıdır. Ama aydınlığa ulaşmak istiyorsanız, çok çalışmalı, mücadele etmeli ve daha fazla öğrenmelisiniz. En azından ben öyle yapıyorum. Evet konumuza dönecek olurak, mümkün olduğunca döngü kullanmıyoruz. Python\u0026rsquo;da bunu bizze sağlayan fonksiyonlardan birde map. Kulanımı basit;\n1 2 items = [1, 2, 3, 4, 5] squared = list(map(lambda x: x**2, items)) mapfonksiyonu ilk parametre olarak bir fonksiyon alıyor ki bu fonksiyon herbir elemana yapmak istediğiniz işlemi yapıyor, ikinci parametre olarakda itere olabilen veri yapsını ve fonksiyonu veri yapısına uyguluyor. Tabi bunu işlemi çok hızlı, temiz bir yapıyla yapıyor. Yazması kolay, anlaması kolay ve performanslı. Karmaşık yapılarıda destekliyor.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 def multiply(x): return (x*x) def add(x): return (x+x) funcs = [multiply, add] for i in range(5): value = list(map(lambda x: x(i), funcs)) print(value) # Output: # [0, 0] # [1, 2] # [4, 4] # [9, 6] # [16, 8] Filter: Sen Gelme Ulan Ayı ! filter aynı map gibi çalışıyor. Tek fark foksiyonumuz veri yapımızın her elemanına bir True False sonucu döndürüyor. True dönenler filtreden geçmiş oluyor. Örnek vermek gerekirse;\n1 2 3 4 5 number_list = range(-5, 5) less_than_zero = list(filter(lambda x: x \u0026lt; 0, number_list)) print(less_than_zero) # Output: [-5, -4, -3, -2, -1] mapfonksiyonu gibi filter fonksiyonu da daha karmaşık işlemleri destekliyor. Ayrıca lambda hakkında bilginiz yoksa mutlaka öğrenin.\nReduce: Benden Tek Bir Şey Bekle ! reduce fonksiyonunu kullanmak için python ile birlikte gelen functools kütüphanesinden import etmemiz gerekiyor from functools import reduce. reduce bir çeşit indirgeme işlemi yapıyor. Bir liste veriyoruz ve bize fonksiyonumuza göre tek bir sonuç dönüyor. Örnek verelim;\n1 2 3 4 from functools import reduce product = reduce((lambda x, y: x * y), [1, 2, 3, 4]) # Output: 24 ya da\n1 2 3 4 from functools import reduce product = reduce(lambda x, y: (x[0] + y[0], x[1] + y[1])), [(1, 2), (3, 4), (5,6)]) # Output: (9, 12) Sanırım örneklerle reduce\u0026lsquo;un hangi amaçla kullanılacağını anlatabilmişimdir.\nBunlardan Başka Var mı? numpy, functools, itertools, operator, collections gibi kütüphaneleri öğrenip daha aktif kullanmaya çalışabilriz. Bu kütüphaneler genellikle bir topluluk tarafından geliştiriler ve epey optimize kütüphanelerdir. Ayrıca generators kullanımı ve fonksiyonel programlama hakkında daha fazla şey öğrenmenizide öneririm.\nSonuç Bu üç fonksiyon özellikle büyük veri kümelerinde çalışıyorsanız çok işinize yarayacaktır. Hem hızlı işlem, hem daha okunaklı ve temiz bir kod yazmış olursunuz. Ben bir for yazmam gerektiğinde kendime ilk sorduğum soru; Bu işi bu üç fonksiyonla ya da başka benzeri bir fonksiyonla yazabilirmiyim diye sorguluyorum. Böyle fonksiyonları kendinizde yazabilirsiniz. Başlangıçta bu fonksiyonları kullanmak çok fayda sağlayacaktır. Bu yazınında sonuda geldik. Sorularınızı, eklemek istediklerinizi ve yapıcı eleştirilerinizi yorumlarda benimle paylaşırsanız sevinirim. Hepinize kolay gelsin, iyi çalımalar.\n","permalink":"https://cihanerman.github.io/posts/map-filter-reduce/","summary":"Başlamadan Önce Herkese merhaba. Bu yazımda python\u0026rsquo;da fonksiyonel programalamnın gücünden faydalanmamızı sağlayan üç fonksiyondan bahsedeceğim. Bu yazı fonksiyonel programlama paradigmasını anlatan bir yazı değil. Bu paradigmanın avantajları; yazması, okuması, konturolü kolay ve tekrar kullanılabilirliği yüksek kod yazılmasını sağlıyor. İnternetten programlama paradigmalarını araştırabilirsiniz. Python yüksek seviyeli bir dil olduğu için birden fazla programlama paradigmanı destekliyor. Python gerçekten çok iyi bir araç. Burada birazdan anlatacağım üç fonksiyonla ilgili daha fazla bilgi edinebilirsiniz.","title":"Athos, Porthos ve Aramis"},{"content":"Başlamadan Önce Herkese merhaba. Bu yıl ki ilk yazıma başlamadan önce birkaç şey söylemek istiyorum. Bu sene daha fazla yazı yazmayı planlıyorum. Bu seneki yazılarıma djangoda pek fazla Türkçe kaynak bulamadığım bir kaç tips and tricks tadında yazılarla başlayacağım. Fikirlerinizi, bildiklerinizi, yapıcı eleştirilerinizi yorumlarda benimle her zaman paylaşabilirsiniz, bundan mutluluk duyarım. Hadi başlayalım.\nVe python \u0026lsquo;ışık olsun\u0026rsquo; dedi. Bahsedeceğim konu yeni bir konu değil, ama fark yaratan bir konu ve henüz bilmeyenler ya da yeni başlayanlara yardımcı olcağını düşündüm bir konu. Bu yazı python daki generator ve iterator ları anlatan bir yazı değil. Linke tıklarsanız ayrıntılı ve güzel bir yazı var, oradan öğrenebilirsiniz. Bu yazımda djangoda generator ve iteratorların kullanımından bahsetmeye çelışacağım.\nBu karanlık ve soğuk evrende Generator\u0026rsquo;ler var Generators\u0026rsquo;lar yeni bir konu değil ama cennetten kovulmuş gibiler. Hiç duymayanlar var, duymuş olup hiç kullanmayalar var ve azda olsa bilen ve kullananlar var. Eğer özel olarak bu konuyu aramıyor sanız ve ya (Buraya dikkat) performans gelistirmek için arama yapmıyorsanız, internette bile pek karşınız çıkmaz. En azından benim çıkmadı.\nPython\u0026rsquo;da genarators nasıl oluşturulu ? İki türlü;\ntür: 1 2 3 def xgenerator(list1): for l in list1: yield l 2.tür:\n1 list2 = (x for x in list1) Evet, python\u0026rsquo;da bu iki şekilde generator oluşturabiliyoruz. Bence çok kolay. Python ve kolaylaştırnız, zorlaştırmayınız felsefesi.\nEee hacı, sadede gel Generatorlar diğer itere olabilen yapılardan daha hızlı çalışır (Özellikle listelerden) ve daha az bellek kullanılır (Özellikle listelere kıyasla). Performans ve bellek kullanımı azaltmak istiyorsanız, django da belki her zaman olmaz ama (Kullanmaktan çekinmeyin) olabildiğince kullanırsanız daha hızlı bir uygulamaya sahip olursunuz. Tabi daha az bellek kullanacağınız için kaynaklarınız daha verimli kullanmış olursunuz.\nTips and tricks bir şeyler diyordun ? Django da bir sorgunu sonuna .iterator() derseniz, örneğin Books.objects.all().iterator() gibi. Bir queryset değil bir genarator elde edersiniz.\n1 2 for book in Books.objects.all().iterator(): # birşeyler Yukarıdaki kullanımda eğer bir sorguyu sadece bir döngüde kullanacaksanız çok iyidir. Hem hızlıdır hem de bellekte hiç yer kaplamaz.\nSon söz Bence generatorlar generic fonksiyonlar kadar güzel bir yapı. Tanıdığım yazılımcılara sorduğumda ve ya internette özellikle aranmadığında pek deyinilmeye bir konu olması sebebiyle genarators\u0026rsquo;lar cennetten kovulmuş gibiler. Pythonda kullanımı çok kolay, django açısından bakarsak çok faydalı. Eğer generator nedir bilmiyorsanız hemen öğrenin, en fazla 5-10 dakkanızı alır. Anladıktan sonrada kullanmaktan çekinmeyin.\nUmarım yardım olabilmişimdir. Ben generators\u0026rsquo;ların faydasını görmeye başladığım için bunu sizlere öneriyorum. Django tutorial\u0026rsquo;larda pek göremeyeceğiniz bir konu. Kendinize iyi bakın ve iyi çalışmalar.\n","permalink":"https://cihanerman.github.io/posts/django-genator-iterator/","summary":"Başlamadan Önce Herkese merhaba. Bu yıl ki ilk yazıma başlamadan önce birkaç şey söylemek istiyorum. Bu sene daha fazla yazı yazmayı planlıyorum. Bu seneki yazılarıma djangoda pek fazla Türkçe kaynak bulamadığım bir kaç tips and tricks tadında yazılarla başlayacağım. Fikirlerinizi, bildiklerinizi, yapıcı eleştirilerinizi yorumlarda benimle her zaman paylaşabilirsiniz, bundan mutluluk duyarım. Hadi başlayalım.\nVe python \u0026lsquo;ışık olsun\u0026rsquo; dedi. Bahsedeceğim konu yeni bir konu değil, ama fark yaratan bir konu ve henüz bilmeyenler ya da yeni başlayanlara yardımcı olcağını düşündüm bir konu.","title":"Büyük oyunu gör. Django'da yaratıcılar ve yineleyiciler."},{"content":"Giriş Herkese merhaba. Bu yazımda r dilinde keras kütüphanesini kullanarak bir gan modeli oluşturmaya çalışacağım. İde olarak r studio kullanacağım.\nGan mı? Gan ya da gans Türkçeye “Çekişmeli Üretici Ağlar” olarak çevriliyor. Başka çevirileride var, siz istediğiniz isimlendirmeyi seçebilirsiniz. İngilizcede “Generative Adversarial Networks” olarak geçiyor. Ben yapay zeka konusunda yeni bir yazılımcıyım, ganları kendi anladığım şekliyle sizlere anlatacağım. Bu şekilde anlatmamın benim gibi bu konulara yeni başlayanlara daha faydalı olacağını düşünüyorum. Bu konuda daha uzun süre çalışmalar yapmış insanlarında yazılarını okumanızı tavsiye ederim.\nBasit, karmaşıktan iyidir.\nGanları anladığım şekilde basitçe anlatmaya çalışayım;\nGanların olayı ismindende anlaşılacağı gibi üretmek. İki yapılı, bir üreticimiz( Generator ), bir de denetleyicimiz( Discriminator ) var. İki yapılı bir ağ. Örnek üzerinden gidelim. Üreticimizi gerçek fotoğraf ya da resimlerle eğitiyoruz, üreticmiz bu öğrendikleri ile bir fotoğraf ya da resim üretiyor. Dentleyicimizde bu oluşan fotoğraf ya da resimlerin gerçek olup olmadığını denetliyor. Üreticimiz denetleyiciden geçebilecek fotoğraf ya da resim oluşturana kadar backpropagation yapıyoruz. Buradaki önemli nokta gan’ın öğrendikleri üzerinden aslında var olmayan fotoğraf ya da resim üretmesi.\nGanlar var olmayan insan yüzleri üretilebiliyor. Var olmayan resim, fotoğraf üretebiliyor, müzik besteleyebiliyor. Örnekler çoğaltılabilir ama burada birazda hayal etmenizi isterim. Ganlar anlatılırken genelde şu örnek üzerinden anlatılır, bilginiz olsun diye anlatıyorum; Üretici kalpazan oluyor, denetçide dedektif. Kalpazan, dedektifi kandırabilcek kalitede sahte resim ya da fotoğraf üretmeye çalışıyor. Kandımayı başara bildiği zaman modelimizin eğitimi tamamlanmış oluyor.\nElimizi Kirletmeye Başlayalım R ve keras kullanarak bir gans modeli oluşturmaya çalışacağı. Bu kaynaktan yararlanacağım. Mnist veri setini kullanacağım.\nKütüphaneler Çalışmamıza kullanacağımız kütüphaneleri eklemekle başlayalım.\nlibrary(keras) library(tfdatasets) Veri Seti ve Ön İşleme Veri setimizi içe aktarıp gerekli bazı ön işlemlerimizi yapalım. Verimizdeki değerleri normalize etmek gibi.\ndata \u0026lt;- dataset_mnist() str(data) ## List of 2 ## $ train:List of 2 ## ..$ x: int [1:60000, 1:28, 1:28] 0 0 0 0 0 0 0 0 0 0 ... ## ..$ y: int [1:60000(1d)] 5 0 4 1 9 2 1 3 1 4 ... ## $ test :List of 2 ## ..$ x: int [1:10000, 1:28, 1:28] 0 0 0 0 0 0 0 0 0 0 ... ## ..$ y: int [1:10000(1d)] 7 2 1 0 4 1 4 9 5 9 ... summary(data) ## Length Class Mode ## train 2 -none- list ## test 2 -none- list c(train_img, train_label) %\u0026lt;-% data$train c(test_img, test_label) %\u0026lt;-% data$test train_img \u0026lt;- (train_img - 127.5) / 127.5 train_img \u0026lt;- array_reshape(train_img, c(60000,28*28)) Veri seti insan elyazılarıyla yazılmış rakam resimlerinden oluşuyor. Bizim üreticimiz, denetleyiciden geçebilecek kalitede sahte resimler üretmeyi öğrenecek( umarım ). Aşağıda veri setinden bazı örenek resimlere yer veriyorum.\npar(mfcol=c(6,6)) par(mar=c(0, 0, 3, 0), xaxs='i', yaxs='i') for (idx in 1:36) { im \u0026lt;- test_img[idx,,] im \u0026lt;- t(apply(im, 2, rev)) image(1:28, 1:28, im, xaxt='n', main=paste(test_label[idx])) } Üretici Üreticimizi oluşturacak foksiyonu yazalım.\ncreate_generator \u0026lt;- function(){ generator \u0026lt;- keras_model_sequential() generator %\u0026gt;% layer_dense(512, input_shape = 100) %\u0026gt;% layer_activation_relu() %\u0026gt;% layer_dense(512) %\u0026gt;% layer_activation_relu() %\u0026gt;% layer_dense(1024) %\u0026gt;% layer_activation_relu() %\u0026gt;% layer_dense(784, activation = \u0026quot;tanh\u0026quot;) generator %\u0026gt;% compile( loss= \u0026quot;binary_crossentropy\u0026quot;, optimizer= optimizer_adam(lr= 0.0001, beta_1 = 0.5) ) return(generator) } generator \u0026lt;- create_generator() summary(generator) ## Model: \u0026quot;sequential\u0026quot; ## ___________________________________________________________________________ ## Layer (type) Output Shape Param # ## =========================================================================== ## dense (Dense) (None, 512) 51712 ## ___________________________________________________________________________ ## re_lu (ReLU) (None, 512) 0 ## ___________________________________________________________________________ ## dense_1 (Dense) (None, 512) 262656 ## ___________________________________________________________________________ ## re_lu_1 (ReLU) (None, 512) 0 ## ___________________________________________________________________________ ## dense_2 (Dense) (None, 1024) 525312 ## ___________________________________________________________________________ ## re_lu_2 (ReLU) (None, 1024) 0 ## ___________________________________________________________________________ ## dense_3 (Dense) (None, 784) 803600 ## =========================================================================== ## Total params: 1,643,280 ## Trainable params: 1,643,280 ## Non-trainable params: 0 ## ___________________________________________________________________________ Denetleyici Denetleyicimizi oluşturacak fonksiyonu yazalım.\ncreate_discriminator \u0026lt;- function(){ discriminator \u0026lt;- keras_model_sequential() discriminator %\u0026gt;% layer_dense(1024, input_shape = 784) %\u0026gt;% layer_activation_relu() %\u0026gt;% layer_dropout(0.4) %\u0026gt;% layer_dense(512) %\u0026gt;% layer_activation_relu() %\u0026gt;% layer_dropout(0.4) %\u0026gt;% layer_dense(256) %\u0026gt;% layer_activation_relu() %\u0026gt;% layer_dense(1, activation = \u0026quot;sigmoid\u0026quot;) discriminator %\u0026gt;% compile( loss= \u0026quot;binary_crossentropy\u0026quot;, optimizer= optimizer_adam(lr= 0.0001, beta_1 = 0.5) ) return(discriminator) } discriminator \u0026lt;- create_discriminator() summary(discriminator) ## Model: \u0026quot;sequential_1\u0026quot; ## ___________________________________________________________________________ ## Layer (type) Output Shape Param # ## =========================================================================== ## dense_4 (Dense) (None, 1024) 803840 ## ___________________________________________________________________________ ## re_lu_3 (ReLU) (None, 1024) 0 ## ___________________________________________________________________________ ## dropout (Dropout) (None, 1024) 0 ## ___________________________________________________________________________ ## dense_5 (Dense) (None, 512) 524800 ## ___________________________________________________________________________ ## re_lu_4 (ReLU) (None, 512) 0 ## ___________________________________________________________________________ ## dropout_1 (Dropout) (None, 512) 0 ## ___________________________________________________________________________ ## dense_6 (Dense) (None, 256) 131328 ## ___________________________________________________________________________ ## re_lu_5 (ReLU) (None, 256) 0 ## ___________________________________________________________________________ ## dense_7 (Dense) (None, 1) 257 ## =========================================================================== ## Total params: 1,460,225 ## Trainable params: 1,460,225 ## Non-trainable params: 0 ## ___________________________________________________________________________ Ve Gan Artık gan modelimizi oluşturmaya hazırız.\ncreate_gan \u0026lt;- function(discriminator, generator){ discriminator.trainable \u0026lt;- F gan_input \u0026lt;- layer_input(shape = c(100)) g \u0026lt;- generator(gan_input) gan_output \u0026lt;- discriminator(g) gan \u0026lt;- keras_model(inputs = gan_input, outputs = gan_output) gan %\u0026gt;% compile(loss= \u0026quot;binary_crossentropy\u0026quot;, optimizer= optimizer_adam()) return(gan) } gan \u0026lt;- create_gan(discriminator, generator) summary(gan) ## Model: \u0026quot;model\u0026quot; ## ___________________________________________________________________________ ## Layer (type) Output Shape Param # ## =========================================================================== ## input_1 (InputLayer) [(None, 100)] 0 ## ___________________________________________________________________________ ## sequential (Sequential) (None, 784) 1643280 ## ___________________________________________________________________________ ## sequential_1 (Sequential) (None, 1) 1460225 ## =========================================================================== ## Total params: 3,103,505 ## Trainable params: 3,103,505 ## Non-trainable params: 0 ## ___________________________________________________________________________ Eğitim Şart Oluşturduğumuz gan modelini eğitmeye hazırız(?).\nepochs \u0026lt;- 50 batch_size \u0026lt;- 256 traning_shape \u0026lt;- 60000 for(e in 0:epochs){ for(b in 0:batch_size){ noise \u0026lt;- runif(n = batch_size, min = 0, max = 1) %\u0026gt;% matrix(nrow = batch_size, ncol = 100) generated_img \u0026lt;- generator %\u0026gt;% predict(noise) img_batch \u0026lt;- train_img[floor(runif(n= batch_size, min= 0, max= 60000)),] # print(nrow(img_batch)) while(nrow(img_batch) != 256 ){ img_batch \u0026lt;- train_img[floor(runif(n= batch_size, min= 0, max= 60000)),] } # img_batch \u0026lt;- train_img[sample(0:traning_shape,batch_size),] concatenate \u0026lt;- rbind(img_batch, generated_img) y_dis \u0026lt;- matrix(0, batch_size*2) y_dis[0:batch_size] \u0026lt;- 1 discriminator.trainable \u0026lt;- T train_on_batch(discriminator, concatenate,y_dis) noise \u0026lt;- runif(n = batch_size*100, min = 0, max = 1) %\u0026gt;% matrix(nrow = batch_size, ncol = 100) y_gen \u0026lt;- matrix(1, batch_size) discriminator.trainable \u0026lt;- F train_on_batch(gan, noise, y_gen) } print(c(\u0026quot;epochs: \u0026quot;,e)) } Kayıt Önemli Oluşturduğumuz modelim ağırlıklarını kayıt edelim.\nsave_model_weights_hdf5(gan, \u0026quot;gan.h5\u0026quot;, overwrite = T) save_model_weights_hdf5(generator, \u0026quot;generator.h5\u0026quot;, overwrite = T) Görselleştirme Yukarıda orjinal fotoğrafların bir kısmını götermiştik. Şimdide modelimizin oluşturduğu fotoğrafları görme zamanı.\nnoise \u0026lt;- runif(n = 12, min = 0, max = 1) %\u0026gt;% matrix(nrow = 100, ncol = 100) gen_img \u0026lt;- generator %\u0026gt;% predict(noise) gen_img \u0026lt;- array_reshape(gen_img, c(100,28,28)) par(mfcol = c(3, 4)) par(mar = c(0.5, 0.5, 0.5, 0.5), xaxs = 'i', yaxs = 'i') for (idx in 1:12) { im \u0026lt;- gen_img[idx,,] im \u0026lt;- t(apply(im, 2, rev)) image(1:28, 1:28, im, xaxt='n',yaxt = 'n') } Sonuç Keras ve r’ın birlikte kullanımına dağir basit bir örnek yaptık. Başarılı bir model oluşturamadığımın farkındayım :( Sürekli kendimi geliştirmeye çalışıyorum. R ve keras’ı birlikte kullanmak isteyenler için bir giriş yazısı yazmaya çalıştım, umarım faydalı olmuştur. Kendinize iyi bakın, iyi çalışmalar dilerim.\n","permalink":"https://cihanerman.github.io/posts/r-keras-ve-gan-gan-gan/","summary":"Giriş Herkese merhaba. Bu yazımda r dilinde keras kütüphanesini kullanarak bir gan modeli oluşturmaya çalışacağım. İde olarak r studio kullanacağım.\nGan mı? Gan ya da gans Türkçeye “Çekişmeli Üretici Ağlar” olarak çevriliyor. Başka çevirileride var, siz istediğiniz isimlendirmeyi seçebilirsiniz. İngilizcede “Generative Adversarial Networks” olarak geçiyor. Ben yapay zeka konusunda yeni bir yazılımcıyım, ganları kendi anladığım şekliyle sizlere anlatacağım. Bu şekilde anlatmamın benim gibi bu konulara yeni başlayanlara daha faydalı olacağını düşünüyorum.","title":"R, Keras ve Gan Gan Gan"},{"content":"Herkese merhaba, Bu yazımda insanın gözünün önünde olupta farkedemediği ve bir o kadar işlevsel, kullanışlı ve güzel olan bir araçtan bahsedeceğim.\nBozkır Dijital ortamda yazı yazmanın bazı zorlukları vardır. Bunların başında okunabilir bir formatta yazı yazmak, yazıyı biçimlendirmenin zaman alması gibi. Eğer yazınızı başka formatlara dönüştürecekseniz veya web\u0026rsquo;de yayınlayacaksanız işlerin rengi değişebilir. Yazıyı istediğiniz gibi biçimlendirdiğinizi düşünürsünüz, ama öyle olmadığını dosyanızı başka formata çevirirdikten sonra anlarsınız. Aynı sorun yazının okunabilirliği konusu içinde geçerlidir. Yazıyı hiyerarşik bir şekilde inşa etmek istediğiniz zamanda zorluk çekebilirsiniz.\nFiziksel ortamda hızlı, kolay ve başkaları tarafından da okunabilir yazı yazmak, bozkırda yaşamak kadar zordur ( Teşbihte hata olmaz :). Bu hem internette gördüğüm, içeriğini güzel bulsamda fiziksel özellikleri yüzünden okumakta zorlandığım bir çok yazıdan ve bir çok insanın dijital ortamda yazdığı yazılarını gördüğüm için söylüyorum. Dijital ortamda fiziksel olarak nizami bir yazı yazmak kolay değil. Buraya dikkat, imkansız demiyorum kolay değil diyorum.\nHayatta kalmak Web\u0026rsquo;de blog ya da başka bir sebepten yazı yayınlıyorsanız, döküman yada e-kitap/kitap yazıyorsanız insanların yazılarınızı kolay okumalarını istersiniz.\nHayal etmenizi istiyorum. 10 ila 20 dakika içerisinde öğrenebileceğiniz, dijital ortamda yazı yazılabilecek herhangi bir araç ile yazabileceğiniz, Başka dosya formatlarına dönüştürdüğünüzde yazınızın fiziksel görüntüsünde bir değişiklik olmadığını, Başlık hiyerarşisini kolayca yapabildiniz, yazınızı nizami, okunabilir ve hızlıca yazabildiğiniz, daha kaliteli ve okunabilir içerikler üretebildiğiniz bir teknoloji, bir format, bir dil den bahsediyorum. Bozkırda hayatta kalmaktan bahsediyorum.\nKaplan Buradan markdown\u0026rsquo;un nasıl yazılacağıyla ilgili kısa bir yazı var. Bu yazımda buna değinmeyeceği. Ayrıca internette aratırsanız, nasıl markdown yazılacağına dair binlerce yazı bulabilirsiniz. Zaten en fazla on tane sembolün ne anlama geldiğini öğreneceksiniz. Dijital ortamda sürekli yazı yazan ve markdown kullanamayan biri beş dakikada bile öğrenebilir.\nKaplan Neden Ormandan Çıktı Markdown, web\u0026rsquo;de yazı yayınlamak isteyen ama html, css gibi dilleri bilmeyen insanlarında(blogger, gazeteci vb.) kolayca yayına hazır yazılar yazabilmelerini sağlamak için çıkmış bir işaretleme dili. Dünya genelinde web\u0026rsquo;de yazı yayınlayanlar tarafından çok kullanılıyor. Ayrıca kitap ve döküman yazımında da kullanılıyor.\nKaplanla Göz Göze Markdown\u0026rsquo;un ne olduğunu biliyordum(bildiğimi sanıyordum). Ama bir süre önce markdown\u0026rsquo;u anlamadığımı farkettim. Belkide düz yazıdan ziyade kod yazdığım içindir, belkide ilk defa blog yazıları yazmaya başladığım içindir. Bir programcı olarak farklı teknolojileri denemeyi, öğrenmeyi severim. Yapay zeka konusunda kendimi geliştirmeye çalışıyorum. Bir süre önce r ile kerası kullanarak cnn derin öğrenme çalışması yaptım. Bunu yaparken r studio ve r markdown\u0026rsquo;ı kullandım. R markdown, markdown\u0026rsquo;un biraz geiliştirilmiş hali diyebiliriz. Başka bir yazımda r markdown\u0026rsquo;u tanıtan bir yazıda yazabilirim. Bu çalışma benim markdown\u0026rsquo;un gerçek potansiyelini görmemi sağladı.\nVe Ben Markdown\u0026rsquo;nun potansiyelini bu kadar geç anladığım için üzgünüm. Ama böyle bir araca en çok ihtiyacımın olacağı zamanda gerçek anlamda sahip oldum. Kaya dan kılıcı çıkartmışım gibi hissediyorum ( Teşbih konusuna yukarıda değinmiştim ). Belki abarttığımı ya da fantiklik yaptığımı düşünebilirsiniz. Ben sadece dijital ortamda yazı yazmayı hızlandıran, kolaylaştıran, başka formatlara dönüştürüldüğünde fiziksel görüntüsünde bozulmalar olmayan, daha okunabilir yazılar yazabileceğinizi düşündüğüm bir aracı bilmeyen ve ya bu zamana kadar potansiyelini benim gibi anlamayanlara, bu basit ve kullanışlı aracı kendimce anlatmak istedim.\nSonuç : Kaplana Yakın Durum Ben bundan sonra dijital ortamda bir yazı yazarken bir engel olmazsa markdown kullanmayı düşünüyorum. Yazıya başka bir formatta kullmam gerkirse önce markdown olarak yazıp, ondan sonra ihtiyacım olan formata dönüştürmeyi planlıyorum. Eğer sizde dijital ortamda yazı yazıyor ve markdown kullanmıyorsanız, denemenizi tavsiye ederim. Bir işi iyi yapan bir çok araç olabilir, Ben işimi gören ve en basit yapıda olananı tercih ederim. Umarım markdown\u0026rsquo;nun potansiyelini anlata bilmişimdir.\nKendinize iyi bakın.\n","permalink":"https://cihanerman.github.io/posts/bozk%C4%B1rdaki-kaplan-markdown/","summary":"Herkese merhaba, Bu yazımda insanın gözünün önünde olupta farkedemediği ve bir o kadar işlevsel, kullanışlı ve güzel olan bir araçtan bahsedeceğim.\nBozkır Dijital ortamda yazı yazmanın bazı zorlukları vardır. Bunların başında okunabilir bir formatta yazı yazmak, yazıyı biçimlendirmenin zaman alması gibi. Eğer yazınızı başka formatlara dönüştürecekseniz veya web\u0026rsquo;de yayınlayacaksanız işlerin rengi değişebilir. Yazıyı istediğiniz gibi biçimlendirdiğinizi düşünürsünüz, ama öyle olmadığını dosyanızı başka formata çevirirdikten sonra anlarsınız. Aynı sorun yazının okunabilirliği konusu içinde geçerlidir.","title":"Bozkırdaki Kaplan"},{"content":"R Dilinde Keras Kullanımı Herkese merhaba, bu çalışmada/yazımda olabildiğince basit bir şekilde R dilinde keras ile cnn modeli oluşturmaya çalışacağız. Hadi başlayalım. Kaynak\nNot: Bu yazı derin öğrenmeyi anlatan bir yazı değildir. Keras kütüphanesini R dilinde nasıl kullanılacağına dağir bir giriş yazısıdır. Bu sebepten bütün kod tek tek açıklanmamıştır. Derin öğrenme konusunda hiç bir bilginiz yoksa, bu yazıyı okumadan önce derin örenme hakkında daha fazla bilgi edinmeniz, bu yazıyı anlamanızı kolaylaştırır.\nÖnce r studio’nun packages kısmandan keras kütüphanesini yüklüyoruz. Daha sonra aşağıdaki kodu çalıştırıyoruz.\n1 2 3 4 5 6 7 8 9 library(keras) #devtools::install_github(\u0026#34;rstudio/keras\u0026#34;) # Bir sorun olursa bu kodu kullanarak yüklemeyi deneye bilirsiniz. #install_keras() # Yüklemeyi tamamlamak için bu kodu da çalıştırmanız gerekiyor. library(zeallot) # Çoklu değişken atama için. is_model = T R studio’da keras yüklenmesi Bu çalışmada cifar-10 veri setini kullanacağız.\nCIFAR-10: CIFAR-10, nesne tanıma için kullanılan yerleşik bir bilgisayar-görü veri setidir. 80 milyon minik resim veri setinin bir alt kümesidir ve sınıf başına 6000 resim içeren, 10 nesne sınıfından birini içeren 60.000 32x32 renkli resimden oluşur. Alex Krizhevsky, Vinod Nair ve Geoffrey Hinton tarafından toplandı.\nDaha ayrıntılı bilgi için Kaggle’da bu adrese bakabilirsiniz\n1 2 3 4 5 6 7 8 9 data \u0026lt;- dataset_cifar10() c(c(x_train,y_train),c(x_test,y_test)) %\u0026lt;-% data str(data) summary(data) ## List of 2## $ train:List of 2## ..$ x: int [1:50000, 1:32, 1:32, 1:3] 59 154 255 28 170 159 164 28 134 125 ...## ..$ y: int [1:50000, 1] 6 9 9 4 1 1 2 7 8 3 ...## $ test :List of 2## ..$ x: int [1:10000, 1:32, 1:32, 1:3] 158 235 158 155 65 179 160 83 23 217 ...## ..$ y: num [1:10000, 1] 3 8 8 0 6 6 1 6 3 1 ... ## Length Class Mode# # train 2 -none- list ## test 2 -none- list Veri Ön İşleme Resimleri işlemeye uygun hale getirelim.\n1 2 3 4 x_train \u0026lt;- x_train / 255 # Gray scale için x_test \u0026lt;- x_test / 255 # Gray scale için y_train \u0026lt;- to_categorical(y_train, num_classes = 10) # Kategorik değişkene çevirme işlemi y_test \u0026lt;- to_categorical(y_test, num_classes = 10) # Kategorik değişkene çevirme işlemi Resimleri siyah beyaz yaptıktan ve kategorilerimizi keras’ın analayaca şekle soktuktan sonra, cnn modelle ilgili işlemlere geçebiliriz.\nModel Öncelikle model mimarisini oluşturalım.\n1 model \u0026lt;- keras_model_sequential() 1 2 3 4 5 6 7 8 9 10 model %\u0026gt;% layer_conv_2d( filter = 32, kernel_size = c(3,3), padding = \u0026#34;same\u0026#34;, input_shape = c(32, 32, 3), activation = \u0026#34;relu\u0026#34; ) %\u0026gt;% layer_conv_2d(filter = 32, kernel_size = c(3,3), activation = \u0026#34;relu\u0026#34;) %\u0026gt;% layer_max_pooling_2d(pool_size = c(2,2)) %\u0026gt;% layer_dropout(0.25) %\u0026gt;% layer_conv_2d(filter = 32, kernel_size = c(3,3), padding = \u0026#34;same\u0026#34;, activation = \u0026#34;relu\u0026#34;) %\u0026gt;% layer_conv_2d(filter = 32, kernel_size = c(3,3), activation = \u0026#34;relu\u0026#34;) %\u0026gt;% layer_max_pooling_2d(pool_size = c(2,2)) %\u0026gt;% layer_dropout(0.25) %\u0026gt;% layer_flatten() %\u0026gt;% layer_dense(512, activation = \u0026#34;relu\u0026#34;) %\u0026gt;% layer_dropout(0.5) %\u0026gt;% layer_dense(10, activation = \u0026#34;softmax\u0026#34;) Oluşturduğumuz modelin nasıl gözüktüğüne bir bakalım.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 str(model) ## Model ## Model: \u0026#34;sequential\u0026#34; ## ___________________________________________________________________________ ## Layer (type) Output Shape Param # ## =========================================================================== ## conv2d (Conv2D) (None, 32, 32, 32) 896 ## ___________________________________________________________________________ ## conv2d_1 (Conv2D) (None, 30, 30, 32) 9248 ## ___________________________________________________________________________ ## max_pooling2d (MaxPooling2D) (None, 15, 15, 32) 0 ## ___________________________________________________________________________ ## dropout (Dropout) (None, 15, 15, 32) 0 ## ___________________________________________________________________________ ## conv2d_2 (Conv2D) (None, 15, 15, 32) 9248 ## ___________________________________________________________________________ ## conv2d_3 (Conv2D) (None, 13, 13, 32) 9248 ## ___________________________________________________________________________ ## max_pooling2d_1 (MaxPooling2D) (None, 6, 6, 32) 0 ## ___________________________________________________________________________ ## dropout_1 (Dropout) (None, 6, 6, 32) 0 ## ___________________________________________________________________________ ## flatten (Flatten) (None, 1152) 0 ## ___________________________________________________________________________ ## dense (Dense) (None, 512) 590336 ## ___________________________________________________________________________ ## dropout_2 (Dropout) (None, 512) 0 ## ___________________________________________________________________________ ## dense_1 (Dense) (None, 10) 5130 ## =========================================================================== ## Total params: 624,106 ## Trainable params: 624,106 ## Non-trainable params: 0 ## ___________________________________________________________________________ Model Derleme Modelimizin mimarisi tamam, artık modelimizi derleye biliriz.\n1 model %\u0026gt;% compile( loss = \u0026#34;categorical_crossentropy\u0026#34;, optimizer = \u0026#34;rmsprop\u0026#34;, metrics = \u0026#34;accuracy\u0026#34; ) Veri Çoaltma Elimizde az veri varsa veriye bazı işlemler uygulayarak(Döndürme, Zoom vs.) elimizdeki veriyi çoğaltabiliriz.\n1 datagen \u0026lt;- image_data_generator(rotation_range = 20,width_shift_range = 0.2,height_shift_range = 0.2,horizontal_flip = TRUE) 1 datagen %\u0026gt;% fit_image_data_generator(x_train) Model Eğitim Artık modelimizi eğitmeye hazırız.\n1 2 batch_size \u0026lt;- 32 # Kaç resmin birlikte eğitileceğinin sayısı epochs \u0026lt;- 5 # Eğitimin kaç kere tekrarlanacağının sayısı. İşlem kısa sürsümesi için sadece 5 epochs veriyorym 1 2 3 4 5 6 if (!is_model) { history \u0026lt;- model %\u0026gt;% fit_generator( flow_images_from_data(x_train, y_train, datagen, batch_size = batch_size), steps_per_epoch = as.integer(50000/batch_size), epochs = epochs, validation_data = list(x_test, y_test) ) } else { history \u0026lt;- load_model_weights_hdf5(model,filepath = \u0026#34;cifar10_cnn.h5\u0026#34;,by_name = FALSE, skip_mismatch = FALSE, reshape = FALSE) } Modelemizin eğitim sonucu loss ve accuracy grafiği:\n1 plot(history) Eğittiğimiz modeli test için ayırdığımız veriler ile test edelim. Accuracy değeri yaklaşık olarak 56% çıkıyor. Bu yazıda amacımız keras’ı R dilinde kullanamaya giriş yapmak. Epochs değerini artırırsak daha iyi bir accuracy değeri alırız.\n1 2 3 model %\u0026gt;% evaluate(x_test, y_test) #=\u0026gt; loss: 1.256696 , acc: 0.5635 Model Save Model eğitmek uzun zaman ve enerji isteyen bir iş. Bu yüzden modellerimizi kaydetmek önemli. Modelin kedisini kaydedersek dosya boyutu çok büyük olabilir. Biz sadece modelelimizin ağırlıklarını kaydedeceğiz.\n1 save_model_weights_hdf5(model, filepath =\u0026#39;cifar10_cnn.h5\u0026#39; , overwrite = T) Daha sonra bu ağırlıkları modelimize load_model_weights_hdf5 foksiyonuyla yeniden yükleyebiliriz.\nSonuç Evet biliyorum bu alanda python daha fazla kullanılıyor. Benim şu anakadarki gözlemlerimden yola çıkarak söylemek isterim ki, bu alanda R ile çalışmak çok daha kolay. Başka sistemler ile enteğre olma sorunu ileride aşılırsa R’ın kulanımı artar diye düşünüyorum. Bu yazımda keras kütüphanesini r dilinde kullanımıyla ilgili bir giriş yazısı yazmak istedim. Umarım faydalı bir yazı olmustur. Herkes iyi günler, iyi çalışmalar dilerim.\nKodlara buradan ulşabilirsiniz\n","permalink":"https://cihanerman.github.io/posts/r-ve-keras%C4%B1n-bachatas%C4%B1/","summary":"R Dilinde Keras Kullanımı Herkese merhaba, bu çalışmada/yazımda olabildiğince basit bir şekilde R dilinde keras ile cnn modeli oluşturmaya çalışacağız. Hadi başlayalım. Kaynak\nNot: Bu yazı derin öğrenmeyi anlatan bir yazı değildir. Keras kütüphanesini R dilinde nasıl kullanılacağına dağir bir giriş yazısıdır. Bu sebepten bütün kod tek tek açıklanmamıştır. Derin öğrenme konusunda hiç bir bilginiz yoksa, bu yazıyı okumadan önce derin örenme hakkında daha fazla bilgi edinmeniz, bu yazıyı anlamanızı kolaylaştırır.","title":"R ve Keras’ın Bachatası"},{"content":"Python’da Veri Manipülasyonuna R Gücü Katmak Herkese merhaba. Yoğunluktan dolayı uzun zamandır yazı yazamıyordum ve bayram tatilini değerlendirirken bir yazı kaleme almak istedim.\nYaklaşık bir buçuk yıl önce ömründe kod görmemiş biriydim. Bir yazılımcı olmayı başardım ve daha iyi bir yazılımcı olmak için çalışıyorum. Yazılım dünyasının şuanki en üst noktalarından biri yapay zeka. Bende kendime bir hedef koydum ve yapay zeka geliştirmek için işten artan zamanda bu konuda kendimi geliştirmeye çalışıyorum.\nVeri bilimi, büyük veri, makine öğrenmesi, yapay zeka konularında python en çok kullanılan dil olsada, bu konuda R dili daha kuvvetli. Python’nun bu konularda fazla kullanılmasının en önemli sebebi bence, başka sistemlerle entegrasyonunun kolay olması. Tabi bir çok başka sebebide var.\nPython’u zaten biliyor ve bu konularda ufakta olsa denemeler yapıyordum. İçimden bir ses R dilinde öğrenmem gerektiğini söylüyordu ve bende öyle yaptım.\nR istatistiksel bir programlama dili olduğu için, veri ön işleme ve veri manipülasyonu python’a göre hem daha kolay hem de daha keyifli. Bunu sağlayan efsane bir R kütüphanesi var; dplyr .\ndplyr kütüphanesi verilari manipüle etmeyi kolaylaştırır. Ben öğrenirken biraz kullandım, kişisel deneyimin çok iyi ve kullanışlı bir kütüphane olduğu yönünde. dplyr, R dünyasında boşuna efsane olmamış diyebilirim.\ndplyr kütüphanesi az kod yazarak çok iş yapmamızı sağlayan kütüphane. Örnekler vermek gerekirse;\n1 starwars %\u0026gt;% filter(species == “Droid”) %\\\u0026gt;% oparatörü soldaki işlemin çıktısını sağtaraftaki işleme girdi olarak verir. starwars veri setinin ismi. Burada species’i droid olanları filtreliyor.\nhttps://www.rdocumentation.org/packages/dplyr/versions/0.7.8 1 2 3 starwars %\u0026gt;% mutate(name, bmi = mass / ((height / 100) ^ 2)) %\u0026gt;% select(name:mass, bmi) Burada bmi adında yeni bir değişkeni veri setinden hesaplayıp, name’den mass’a kadar olan değişkenleri ve yeni oluşturduğu bmi değişkeni seçiyor.\nhttps://www.rdocumentation.org/packages/dplyr/versions/0.7.8 Daha bir çok uzun işlemi, gruplama, hesaplama vs. çok kolay ve kısa bir şekilde yazmamızı sağlıyor.\nGelelim yazının başlığına. Pythonun çok tercih edeilmesinden kaynaklı R dünyasından python dünyasına geçenler R daki bu kolaylığı python dünyasına getirmeye çalışıyorlar.\ndfply dfply kütüphanesi bunlar biri ve dplyr ile aynı mantıkta çalışıyor.\npip install dfply diyerek yükleye biliyoruz. Burada bir not geçmek gerekirse bu kütüphane pandas DataFrame’leri üzerinde çalışıyor.\ndplyr’de ki %\u0026gt;% operatörünün yerini \u0026gt;\u0026gt; ve \u0026gt;\u0026gt;= operataörleri alıyor. “=” işlemi yaptıktan sonra üzerine kaydetme işlemi yapıyor. Örnek vermek gerekirse;\n1 2 3 from dfply import * diamonds \u0026gt;\u0026gt; select(X.carat, X.cut) \u0026gt;\u0026gt; head(3) diamonds veri seti, veri setinden carat ve cut değişkenlerini seçip ilk üçünü gözlemi geri döndüren basit bir kod.\n1 diamonds \u0026gt;\u0026gt; mutate(x_plus_y=X.x + X.y, y_div_z=(X.y / X.z)) \u0026gt;\u0026gt; select(columns_from(\u0026#39;x\u0026#39;)) Bu kon veri setine iki yeni hesaplanmış değişken ekledikten sonra x değişkeninde başlayarak en son değişkene kadar olan veri setinin ilgili kısmını geri döndüren bir kod.\nhttps://dplyr.tidyverse.org/reference/index.html ve https://github.com/kieferk/dfply/blob/master/README.md\nsiteleri ziyaret ederseniz bu kütüphanele hakkında daha fazla bilgi edinebilir ve daha fazla örneği inceleyebilirsiniz. Ben de referans olarak bu siteleri kullandım.\nBu konulara ilgiliyseniz veya zaten çalışıyorsanız bu kütüphaneyi inceleye bilirsiniz. Veri manipülasyonu kısmında size hız ve verim katacaktır.\nBu yazımda veri bilimi, makine öğrenmesi kounalarında veri manipülasyonu konusunda işleri hızlandıran bir kütüphaneyi tanıtmaya çalıştım Umarım faydalı olur. Sizler de veri bilimi, makine öğrenmesi ve yapay zeka konularında işleri kolaylaştıracak kütüphaneler biliyorsanız, yorumlarda paylaşa bilirsiniz. Şimdiden teşekkürler.\nHerkese iyi günler, iyi çalışmlar.\nBir sonraki yazımda görüşmek üzere.\n","permalink":"https://cihanerman.github.io/posts/pythonda-veri-manipulasyonuna-r-g%C3%BCc%C3%BC-katmak/","summary":"Python’da Veri Manipülasyonuna R Gücü Katmak Herkese merhaba. Yoğunluktan dolayı uzun zamandır yazı yazamıyordum ve bayram tatilini değerlendirirken bir yazı kaleme almak istedim.\nYaklaşık bir buçuk yıl önce ömründe kod görmemiş biriydim. Bir yazılımcı olmayı başardım ve daha iyi bir yazılımcı olmak için çalışıyorum. Yazılım dünyasının şuanki en üst noktalarından biri yapay zeka. Bende kendime bir hedef koydum ve yapay zeka geliştirmek için işten artan zamanda bu konuda kendimi geliştirmeye çalışıyorum.","title":"Python’da Veri Manipülasyonuna R Gücü Katmak "},{"content":"Herkese merhaba.\nBu yazı bir önceki yazımın devamıdır, bir önceki yazımda CreateView’i anlatmaya çalışmıştım. Kaynak olarak djangoproject sitesi kullanıyorum.\nHadi başlayalım.\nBi önceki yazımızda ModelForm’dan inherit ettiğimiz formumuzu CreatView ile çok kolay ve kısa bir şekilde veri tabanına kaydetmiştik. Şimdi kaldığımız yerden bu kaydettiğimiz Post’u UpdateView kullanarak aynı kolaylıkla poslarımızı güncelleyeceğiz. Bu sebepten bir önceki yazıda kaldığımız yerden devam ediyoruz.\nİlk olarak UpdateView’den inherit edeceğimiz classview’ı oluşturyoruz.\n1 from .models import Postfrom django.views import generic 1 2 3 4 5 class PostUpdateView(generic.UpdateView): model = Post fields = [\u0026#39;text\u0026#39;] template_name = \u0026#34;blog/post_edit.html\u0026#34; success_url = \u0026#34;/\u0026#34; views.py içerisine modelimizi ve generic sınıfımızı impor ediyoruz, daha sonra classview’ı UpdateView sınıfından inherit ediyoruz. Kullanıcağımız modeli, model kısmında , güncellemeye izin vereceğimiz kısımları fields kısmında(Burada sadece text kısmının değiştirlmesine izin veriyoruz) belirtiyoruz, ClassView’ın kullanacağı html sayfasını template_name’ de belirtiyoruz ve ensonda bu işlem başarılı olursa hangi sayfaya yönlendireceğimizi belirtiyoruz.(Bu örnekte anasayfa). Şimdide html sayfamızı oluşturalım.\n1 2 3 4 \u0026lt;form action=\u0026#34;\u0026#34; method=\u0026#34;post\u0026#34;\u0026gt; csrf_token {{ form.as_p }} \u0026lt;input type=\u0026#34;submit\u0026#34; value=\u0026#34;Send message\u0026#34; /\u0026gt; \u0026lt;/form\u0026gt; Evet sadece bukadar. Son olarak urls.py’de sayfanın url’ini belirtiyoruz.\n1 2 3 from django.conf.urls import urlfrom . import views urlpatterns = [ url(r\u0026#39;^post/update/(?P\u0026lt;pk\u0026gt;[0-9]+)/$\u0026#39;, views.PostUpdateView.as_view(), name=\u0026#39;updateblog\u0026#39;),] Herşey bukadar, gerikalanı django kendisi hallediyor.\nOrtaya buna benzer bir görüntü çıkacak.\nBir sonraki yazımda DetailView’i anlatmaya çalışacağım. Eksik yada yanlış olduğunu düşündüğünüz veya eklemek istediğiniz bir yer olursa yorumlarda belirtmenizi rica ederim, yapıcı eleştirilere her zaman açığım.\nBu yazımda basit olarak djangodaki generic view’lerden UpdateView anlatmaya çalıştım. Bir sonraki yazımda görüşmek üzere iyi günler, iyi çalışmalar.\n","permalink":"https://cihanerman.github.io/posts/django-updateview-kullan%C4%B1m%C4%B1/","summary":"Herkese merhaba.\nBu yazı bir önceki yazımın devamıdır, bir önceki yazımda CreateView’i anlatmaya çalışmıştım. Kaynak olarak djangoproject sitesi kullanıyorum.\nHadi başlayalım.\nBi önceki yazımızda ModelForm’dan inherit ettiğimiz formumuzu CreatView ile çok kolay ve kısa bir şekilde veri tabanına kaydetmiştik. Şimdi kaldığımız yerden bu kaydettiğimiz Post’u UpdateView kullanarak aynı kolaylıkla poslarımızı güncelleyeceğiz. Bu sebepten bir önceki yazıda kaldığımız yerden devam ediyoruz.\nİlk olarak UpdateView’den inherit edeceğimiz classview’ı oluşturyoruz.\n1 from .models import Postfrom django.","title":"Django UpdateView kullanımı"},{"content":"Herkese merhaba.\nBu yazımda django’da ki CreateView’i anlatmaya çalışacağım. CreateView django’da ki generik ViewClass’lar dan biri ve işleri çok kolaylaştırıyor. Kayank olarak djangoproject sitesinden faydalandım. Hadi başlayalım.\nÖncelikle models.py dosyası içerisinde modelimizi oluşturalım.\n1 2 3 class Post(models.Model): title = models.CharField() text = models.TextField() İki property’i olan Post ismindeki modelimizi tanımladık. Şimdi forms.py dosyamıza gidip formumuzu oluşturalım(Bu kısımları önceki yazılarımda açıkladığım için burada anlatmıyorum, önceki yazılarımı inceleyebilirsiniz.)\n1 from django import formsfrom .models import Post 1 2 3 4 class PostForm(forms.ModelForm): class Meta: model = Post fields = [\u0026#39;title\u0026#39;,\u0026#39;text\u0026#39;,] ModelForm oluşturmayı bir önceki yazımda anlatmıştım. Burada sadece kodu göstermekle yetineceğim. Merak edenler bir önceki yazımı inceleyebilirler. Şimdide views.py dosyasında create view’i oluşturalım.\n1 from django.views.generic.edit import CreateViewfrom .models import Post 1 2 3 4 5 class PostAdd(CreateView): model = Post f ields = [\u0026#39;title\u0026#39;,\u0026#39;text\u0026#39;] template_name = \u0026#34;blog/post_add.html\u0026#34; success_url = \u0026#34;/\u0026#34; Burada CreateView’a hangi modeli kullanıcağını belirtiyoruz. Daha sonra form da kullanacağımız alanları, formu göstereceğimiz html sayfasını ve son olarak form başarılı bir şekilde kayıt olursa(Burada yeni post ekleme işlemi)gideci adresin url’ini belirtiyoruz. Şimdi de post_add.html sayfasını oluşturalım.\n1 2 3 4 \u0026lt;form method=\u0026#34;post\u0026#34;\u0026gt; csrf_token {\\{ form.as_p }} \u0026lt;input type=\u0026#34;submit\u0026#34; value=\u0026#34;Save\u0026#34; /\u0026gt; \u0026lt;/form\u0026gt; Sadece bukadar bir önceki yazımda bu kod parçasını anlatmıştım, oradan inceleyebilirsiniz. Son olarak urls.py sayfasına CreateView’ın url’ini belirtelim.\n1 2 3 4 5 6 7 8 9 from django.conf.urls import url from . import views urlpatterns = [ url(*r*’\\^\\$’, views.PostAdd.as\\_view(), *name*=’post\\_add’), ] Görüntü aşağıdaki ne benzer olacaktır(Ben anlatımı basitleştirmek için kendi yaptığım örnekten çıkarmalar yaptım, resimdeki fazlalıkların sebebi bu).\nBir yazının daha sonuna geldik. Yanlış bulduğunuz yada eklemek istediğiniz bir şey olursa lütfen yorumlarda belirtiniz. Bir sonraki yazımda updateView’ı anlatıcam o yazıyı bunun devamı gibi görebilirsiniz, bu yazının bittiği yerden başlayacak. Herkese iyi günler iyi çalışmalar dilerim.\n","permalink":"https://cihanerman.github.io/posts/django-createview-kullan%C4%B1m%C4%B1/","summary":"Herkese merhaba.\nBu yazımda django’da ki CreateView’i anlatmaya çalışacağım. CreateView django’da ki generik ViewClass’lar dan biri ve işleri çok kolaylaştırıyor. Kayank olarak djangoproject sitesinden faydalandım. Hadi başlayalım.\nÖncelikle models.py dosyası içerisinde modelimizi oluşturalım.\n1 2 3 class Post(models.Model): title = models.CharField() text = models.TextField() İki property’i olan Post ismindeki modelimizi tanımladık. Şimdi forms.py dosyamıza gidip formumuzu oluşturalım(Bu kısımları önceki yazılarımda açıkladığım için burada anlatmıyorum, önceki yazılarımı inceleyebilirsiniz.)\n1 from django import formsfrom .","title":"Django’da CreateView kullanımı"},{"content":"Herkese merhaba.\nBu yazımda django’da ki FormView’in nasıl kullanıldığını anlatmaya çalışacağım. Kaynak olarak https://docs.djangoproject.com/en/2.0/ref/class-based-views/generic-editing/ kulladım.\nNot: Bu yazı giriş seviyesinde django bildiğinizi kabul eder.\nÖnce models.py içinde modelimizi oluşturalım.\n1 from django.db import modelsclass Post(models.Model): title = models.CharField() context = models.TextField() Şimdide forms.py dosyamızın içinde formumuzu oluşturalım.\n1 from django import forms 1 from .models import Post 1 2 3 4 class PostForm(forms.ModelForm): class Meta: model = Post fields = [\u0026#39;title\u0026#39;, \u0026#39;context\u0026#39;,] Burada PostForm formumuzu temsil ediyor ve ModelForm’dan inherit ediyoruz. model kısmında modelimiz belirtiyoruz ve fields kısmında modelimizde ki form ile doldurulacak alanları yazıyoruz.(Post’un oluşturulma tarihi olabilir ve oluşturulduğu tarih otomatik doldururabiliriz, bu durumda bunu PostForma eklememiz gerekmez, bu işi model kısmında halledilebilir)\nviews.py dosyamıza formumuzu oluşturacak class view’ı yazalım.\n1 2 3 4 5 6 7 from myapp.forms import PostFormfrom django.views.generic.edit import FormViewclass PostView(FormView): t emplate_name = \u0026#39;post_form.html\u0026#39; form_class = PostForm success_url = \u0026#39;/\u0026#39; PostForm ve FormView’i impor ediyoruz. template_name formumuzu görüntüleyeceğimiz html sayfası(birazdan yazacağız) form_class’a ModelForm’u veriyoruz(burada PostForm oluyor), success_url’de form gönderme işlemi başarılı olursa yönlendireceğimiz adresin url’ini veriyoruz.\nŞimdide post_form.html’i yazalım.\n1 2 3 4 \u0026lt;form action=\u0026#34;\u0026#34; method=\u0026#34;post\u0026#34;\u0026gt;csrf_token {\\{ form.as_p }} \u0026lt;input type=\u0026#34;submit\u0026#34; value=\u0026#34;Send\u0026#34; /\u0026gt; \u0026lt;/form\u0026gt; Burada fields larımızı form öğesi olarak yerleştiren kısım {{ form.as_p }} süslü parantezler ekranda gösterimi sağlayan django template syntax’ı. .as_p her öğeyi paragraf gibi değerlendirmesini söylüyoruz.(form inputlarını alt alta sıralamak için)\nVe son olarak form sayfamızın urls.py içerisine from’un url’ini ekliyoruz.\n1 from django.conf.urls import urlfrom . import views 1 urlpatterns = [ url(r\u0026#39;^post/new/$\u0026#39;, views.PostView.as_view(), name=\u0026#39;post_new\u0026#39;),] Bundan sonra bu url’de form doldurulup, send butonuna basıldığında form gönderilir. Formun veri tabanına kaydedilmesi bu yazının konusu olmadığı için burada anlatmıyorum. Veri tabanı kodlarınızda bir sıkıntı yoksa poslar veri tabanına kaydedilir.\nGörüntü buna benziyor. Ben yazı gereksiz uzamasın diye bazı kısımları çıkardım(çok büyük bir far yok).\nDjango da işleri epey kolaylaştıran bir yöntem. Daha güzel ve kolay bir yöntemde var ileriki yazımda onada değineceğim.\nBir yazının daha sonuna geldik.(Daha 3. yazım :) )Yapıcı eleştirilere, yazıya katkılara her zaman açığım. Eklemek istedikleriniz ve ya yanlış olduğunu düşündüğünüz yerleri yorumlarda belirtebilirsiz.\nBir sonraki yazıda buluşmak üzere. Herkese iyi günler, iyi çalışmalar dilerim.\n","permalink":"https://cihanerman.github.io/posts/django-formview-kullan%C4%B1m%C4%B1/","summary":"Herkese merhaba.\nBu yazımda django’da ki FormView’in nasıl kullanıldığını anlatmaya çalışacağım. Kaynak olarak https://docs.djangoproject.com/en/2.0/ref/class-based-views/generic-editing/ kulladım.\nNot: Bu yazı giriş seviyesinde django bildiğinizi kabul eder.\nÖnce models.py içinde modelimizi oluşturalım.\n1 from django.db import modelsclass Post(models.Model): title = models.CharField() context = models.TextField() Şimdide forms.py dosyamızın içinde formumuzu oluşturalım.\n1 from django import forms 1 from .models import Post 1 2 3 4 class PostForm(forms.ModelForm): class Meta: model = Post fields = [\u0026#39;title\u0026#39;, \u0026#39;context\u0026#39;,] Burada PostForm formumuzu temsil ediyor ve ModelForm’dan inherit ediyoruz.","title":"Django FormView kullanımı"},{"content":"Bu yazımda django’da ki generic view konusundan listview’ı anlatmaya çalışacağım. Kaynak olarak https://docs.djangoproject.com/en/2.0/ref/class-based-views/generic-display/ kullandım. Bu yazı giriş seviyesinde django bildiğinizi var sayar. Başlayalım.\nÖnce uygulamamız içindeki model.py dosyasında modelemizi tanımlayalım.\n1 from django.db import models 1 2 3 4 class Post(models.Model): yazar = models.ForeignKey() baslik = models.CharField() icerik = models.TextField() İlk satırda modellerimizin kalıtım alacağı models sınıfını models.py dosyamıza import ediyoruz ve Post modelimizi bu model sınıfını miras alacak şekilde oluşturuyoruz. Post modelimizin yazar, baslik ve icerik isimlerinde 3 property’i var.\nŞimdi uygulamamızda ki views.py dosyasına Post modelimizi listeleyecek listview’ı yazalım.\n1 from .models import Postfrom django.views import generic 1 2 3 4 class PostListView(generic.ListView): model = Post template_name = \u0026#34;blog/post_list.html\u0026#34; queryset = Post.objects.all() views.py dosyamıza modelimizi ve listview’ı miras alacağımız için generic viewları import ediyoruz. Daha sonra PostListView isminde ki class view’ımızı listview’dan miras alacak şekilde yazıyorız. Burada model property’sine modelimiz olan Post’u veriyoruz. template_name property’sine Post’larımızı göstereceğimiz html dosyasının yolunu yazıyoruz. queryset property’sine de göstermek istediğimiz Postl’arın veri tabanı sorgusunu yazıyoruz. Burada bütün postları çekiyoruz.\nŞimdi de post_list.html’i yazalım Post’larımızı bu sayfada görüntüleyeceğiz.\n1 2 3 4 5 6 7 8 9 {\\% for post in object_list \\%} \u0026lt;hr\u0026gt; \u0026lt;div\u0026gt; \u0026lt;h1\u0026gt;{\\{ post.title }}\u0026lt;/h1\u0026gt; \u0026lt;p\u0026gt;{\\{ post.text|linebreaksbr }}\u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt; {\\% endfor \\%} #=\u0026gt; not: backslash işaretkeri kullandığım web site generation yüzünden koydum Buradaki object_list bizim PostListView’den gelen Post’larımızın listesi (Bu ismi istersek değiştire biliyoruz). post da listedeki her bir Post’umuzu temsil ediyor. Bütün Post’larımız derleme esnasında burada yazdırılıyor.\nSon olarak uygulamamızın urls.py dosyasına sayfamızın yolunu yazıyoruz.\n1 from django.conf.urls import urlfrom . import views 1 urlpatterns = [ url(r\u0026#39;^$\u0026#39;, views.PostListView.as_view(), name=\u0026#39;post_list\u0026#39;),] url’leri yazbilmek için import ediyoruz ve views’larımızı kullanabilmek içinde views.py dosyamızı da import ediyoruz. Burada siteye bu “/” url ile gelindiğinde çağırılacak class view’ı belirtiyoruz. Bir class view kulladığımız için view’ın isminin sonuna .as_view() eklemesi yapıyoruz.\nSonuç bu şekilde bir görsel elde ediyoruz (Tabi burada Bootstrap kullandım). Butün bu kodlar arasındaki bağlanyı django kendisi yapıyor.\nBaşta da belirttiğim gibi bu yazı giriş seviyesinde django bildiğiniz var sayar ve bu yüzden bazı noktalar doğrudan yazının konusu olmadığı için açıklanmamıştır.\nPython ve django da yeniyim ve ilk defa böyle bir blog tuttuyorum, hatalarım için şimdiden özür dilerim, elimden gelen en iyi şekilde anlatmaya çalıştım. Umarım birilerine faydası olur. Eklemelere, yazıdaki eksik ve ya hatalı bir yer varsa düzeltmelere her zaman açığım.\nBir sonraki yazıda görüşmek üzere. Herkese iyi günler, iyi çalışmalar dilerim.\n","permalink":"https://cihanerman.github.io/posts/django-listview-kullan%C4%B1m%C4%B1/","summary":"Bu yazımda django’da ki generic view konusundan listview’ı anlatmaya çalışacağım. Kaynak olarak https://docs.djangoproject.com/en/2.0/ref/class-based-views/generic-display/ kullandım. Bu yazı giriş seviyesinde django bildiğinizi var sayar. Başlayalım.\nÖnce uygulamamız içindeki model.py dosyasında modelemizi tanımlayalım.\n1 from django.db import models 1 2 3 4 class Post(models.Model): yazar = models.ForeignKey() baslik = models.CharField() icerik = models.TextField() İlk satırda modellerimizin kalıtım alacağı models sınıfını models.py dosyamıza import ediyoruz ve Post modelimizi bu model sınıfını miras alacak şekilde oluşturuyoruz.","title":"Django Listview kullanımı"},{"content":"İnsanlar hayatları boyunca iyi veya kötü birçok olayla karşılaşırlar. Hayatın insanı nerelere sürükleyeceği belli olmaz. Bu sözlerim kaderci bir yaklaşım olarak algılanmamalı. Evrenin hamuru kaos ve keşmekeşlikle yoğrulmuşken, hayatın böyle olması doğal.\nTeknik lise makina (torna) ve ondan sonra otomotiv öğretmenliği okumuş biriyim. Uzun zaman işsiz kaldıktan sonra, hayat karşıma yazılımı çıkardı. Nispeten uzun sayılabilecek bir kurstan sonra yazılımcı oldum ve kursun bitiminden birkaç ay sonra yazılımcı olarak bir iş buldum. 2018 yılından beri yazılım alanında çalışıyorum. Artık kendime bir yazılımcı diyebilirim ve hep daha iyi bir yazılımcı olmak için çalışıyorum.\nPython, go, js, django, postgresql, nosql, ai destekli uygulamalar, langchain, elasticsearch ve daha fazlasıyla ilgileniyorum.\nBu blog\u0026rsquo;u açmamdaki amacım öğrendiklerimi hem başkalarına aktarmak hem de bu konuda yeni başlamış insanlara yardımcı olmak, öğrendiklerimi ve gelişimimi kayıt altına almak, ayrıca bir kişisel blog tutmaktır. İlk defa bir blog tuttuğum için başlarda fazlaca hata yapabilirim. Tavsiyelere ve yapıcı eleştirilere her zaman açığım.\nBütün bunları belirttikten sonra başlamaya hazır olduğumu düşünüyorum. Bu ilk yazım ve fırsatım olursa haftada bir yazı paylaşmayı planlıyorum. Herkese iyi günler, iyi çalışmalar ve mutlu bir hayat dilerim. Tekrar görüşene kadar kendinize iyi bakın.\n","permalink":"https://cihanerman.github.io/posts/baslangic/","summary":"İnsanlar hayatları boyunca iyi veya kötü birçok olayla karşılaşırlar. Hayatın insanı nerelere sürükleyeceği belli olmaz. Bu sözlerim kaderci bir yaklaşım olarak algılanmamalı. Evrenin hamuru kaos ve keşmekeşlikle yoğrulmuşken, hayatın böyle olması doğal.\nTeknik lise makina (torna) ve ondan sonra otomotiv öğretmenliği okumuş biriyim. Uzun zaman işsiz kaldıktan sonra, hayat karşıma yazılımı çıkardı. Nispeten uzun sayılabilecek bir kurstan sonra yazılımcı oldum ve kursun bitiminden birkaç ay sonra yazılımcı olarak bir iş buldum.","title":"Başlangıç"}]